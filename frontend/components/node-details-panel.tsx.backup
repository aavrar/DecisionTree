"use client"

import { X, MapPin, ThumbsUp, ThumbsDown, Info, ChevronDown, ChevronRight, AlertTriangle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Slider } from "@/components/ui/slider"
import { Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip"
import type { TreeNodeData } from "@/types/decision"
import { useState, useEffect } from "react"

interface NodeDetailsPanelProps {
  node: TreeNodeData | null
  decisionStatus: "draft" | "active" | "resolved" | "archived" | "complete"
  onClose: () => void
  onUpdate: (nodeId: string, updates: Partial<TreeNodeData>) => void
}

export function NodeDetailsPanel({ node, decisionStatus, onClose, onUpdate }: NodeDetailsPanelProps) {
  const [localName, setLocalName] = useState("")
  const [localDescription, setLocalDescription] = useState("")
  const [localNotes, setLocalNotes] = useState("")
  const [localAddress, setLocalAddress] = useState("")
  const [localType, setLocalType] = useState<"outcome" | "consequence" | "option" | "consideration">("outcome")
  const [localCategory, setLocalCategory] = useState<"financial" | "personal" | "career" | "health">("personal")
  const [localSelection, setLocalSelection] = useState<"yes" | "no" | "pending">("pending")
  const [showTypeMenu, setShowTypeMenu] = useState(false)
  const [showCategoryMenu, setShowCategoryMenu] = useState(false)
  const [showAdvanced, setShowAdvanced] = useState(false)
  const [importance, setImportance] = useState(50)
  const [emotionalWeight, setEmotionalWeight] = useState(50)
  const [uncertainty, setUncertainty] = useState(50)
  const [regretPotential, setRegretPotential] = useState(50)

  useEffect(() => {
    if (node) {
      setLocalName(node.name || "")
      setLocalDescription(node.description || "")
      setLocalNotes(node.notes || "")
      setLocalAddress(node.address || "")
      setLocalType(node.type)
      setLocalCategory(node.category || "personal")
      setLocalSelection(node.selection || "pending")
      setImportance(node.importance ?? 50)
      setEmotionalWeight(node.emotionalWeight ?? 50)
      setUncertainty(node.uncertainty ?? 50)
      setRegretPotential(node.regretPotential ?? 50)
    }
  }, [node?.id])

  if (!node) return null

  const isReadOnly = decisionStatus === "complete"
  const isActive = decisionStatus === "active"
  const isRootNode = node.id === 'root'

  const handleSave = () => {
    if (isRootNode) {
      // Root node only updates name, description, and notes
      onUpdate(node.id, {
        name: localName,
        description: localDescription,
        notes: localNotes,
      })
    } else {
      // Regular nodes update everything
      onUpdate(node.id, {
        name: localName,
        description: localDescription,
        notes: localNotes,
        address: localAddress,
        type: localType,
        category: localCategory,
        importance,
        emotionalWeight,
        uncertainty,
        regretPotential,
        selection: localSelection,
      })
    }
    onClose()
  }

  const handleSelection = (selection: "yes" | "no") => {
    setLocalSelection(selection)
    onUpdate(node.id, {
      selection
    })
  }

  const rawWeight = Math.round((importance + emotionalWeight + (100 - uncertainty) + (100 - regretPotential)) / 4)

  const nodeTypes: Array<"outcome" | "consequence" | "option" | "consideration"> = [
    "outcome",
    "consequence",
    "option",
    "consideration"
  ]

  const categories: Array<"financial" | "personal" | "career" | "health"> = [
    "financial",
    "personal",
    "career",
    "health"
  ]

  const getTypeStyles = (type: string) => {
    switch (type) {
      case "outcome":
        return "bg-blue-500/20 text-blue-300 border-blue-500/30 hover:bg-blue-500/30"
      case "consequence":
        return "bg-purple-500/20 text-purple-300 border-purple-500/30 hover:bg-purple-500/30"
      case "option":
        return "bg-green-500/20 text-green-300 border-green-500/30 hover:bg-green-500/30"
      case "consideration":
        return "bg-orange-500/20 text-orange-300 border-orange-500/30 hover:bg-orange-500/30"
      default:
        return "bg-gray-500/20 text-gray-300 border-gray-500/30 hover:bg-gray-500/30"
    }
  }

  const getCategoryStyles = (category: string) => {
    switch (category) {
      case "financial":
        return "bg-green-500/20 text-green-300 border-green-500/30 hover:bg-green-500/30"
      case "personal":
        return "bg-blue-500/20 text-blue-300 border-blue-500/30 hover:bg-blue-500/30"
      case "career":
        return "bg-purple-500/20 text-purple-300 border-purple-500/30 hover:bg-purple-500/30"
      case "health":
        return "bg-red-500/20 text-red-300 border-red-500/30 hover:bg-red-500/30"
      default:
        return "bg-gray-500/20 text-gray-300 border-gray-500/30 hover:bg-gray-500/30"
    }
  }

  return (
    <div className="fixed inset-y-0 right-0 w-96 bg-black border-l border-white/20 z-50 flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-white/10">
        <h2 className="text-lg font-semibold text-white">
          {isRootNode ? "Decision Details" : isReadOnly ? "Node Details (Read-Only)" : isActive ? "Branch Selection" : "Node Details"}
        </h2>
        <Button
          onClick={onClose}
          variant="ghost"
          size="sm"
          className="text-gray-400 hover:text-white h-8 w-8 p-0"
        >
          <X className="h-4 w-4" />
        </Button>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto p-4 space-y-6">
        {/* Root Node: Simplified View */}
        {isRootNode ? (
          <>
            {/* Info Banner */}
            <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
              <p className="text-sm text-blue-300">
                This is your main decision question. Child nodes represent the factors you're considering.
              </p>
            </div>

            {/* Decision Title */}
            <div>
              <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Decision Question</label>
              <Input
                value={localName}
                onChange={(e) => setLocalName(e.target.value)}
                disabled={isReadOnly || isActive}
                className="mt-2 bg-white/5 border-white/20 text-white disabled:opacity-60 disabled:cursor-not-allowed"
                placeholder="e.g., Should I go to graduate school?"
              />
            </div>

            {/* Description */}
            <div>
              <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Context</label>
              <Textarea
                value={localDescription}
                onChange={(e) => setLocalDescription(e.target.value)}
                disabled={isReadOnly || isActive}
                className="mt-2 bg-white/5 border-white/20 text-white min-h-[120px] disabled:opacity-60 disabled:cursor-not-allowed"
                placeholder="Provide context for your decision..."
              />
            </div>

            {/* Notes */}
            <div>
              <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Personal Notes</label>
              <Textarea
                value={localNotes}
                onChange={(e) => setLocalNotes(e.target.value)}
                disabled={isReadOnly}
                className="mt-2 bg-white/5 border-white/20 text-white min-h-[120px] disabled:opacity-60 disabled:cursor-not-allowed"
                placeholder="Add your thoughts here..."
              />
            </div>
          </>
        ) : (
          <>
            {/* Active Decision: Selection Buttons */}
            {isActive && (
              <div className="bg-gradient-to-r from-blue-500/10 to-green-500/10 border border-white/20 rounded-lg p-4">
                <label className="text-sm font-medium text-white mb-3 block">
                  Do you want to go down this branch?
                </label>
                <div className="grid grid-cols-2 gap-3">
                  <Button
                    onClick={() => handleSelection("yes")}
                    className={`flex items-center justify-center gap-2 font-semibold transition-all ${
                      localSelection === "yes"
                        ? "bg-green-600 text-white hover:bg-green-700"
                        : "bg-white/5 text-gray-400 hover:bg-white/10 border border-white/20"
                    }`}
                  >
                    <ThumbsUp className="w-4 h-4" />
                    Yes
                  </Button>
                  <Button
                    onClick={() => handleSelection("no")}
                    className={`flex items-center justify-center gap-2 font-semibold transition-all ${
                      localSelection === "no"
                        ? "bg-red-600 text-white hover:bg-red-700"
                        : "bg-white/5 text-gray-400 hover:bg-white/10 border border-white/20"
                    }`}
                  >
                    <ThumbsDown className="w-4 h-4" />
                    No
                  </Button>
                </div>
                {localSelection === "pending" && (
                  <p className="text-xs text-gray-500 mt-3 text-center">
                    No selection made yet
                  </p>
                )}
              </div>
            )}

            {/* Node Type */}
            <div className="relative">
              <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Type</label>
          <button
            onClick={() => !isReadOnly && setShowTypeMenu(!showTypeMenu)}
            disabled={isReadOnly}
            className={`mt-2 px-3 py-2 rounded-lg border transition-all ${
              isReadOnly ? "cursor-not-allowed opacity-60" : "cursor-pointer"
            } ${getTypeStyles(localType)}`}
          >
            {localType}
          </button>

          {showTypeMenu && !isReadOnly && (
            <div className="absolute top-full mt-2 bg-black border border-white/20 rounded-lg shadow-xl z-10 overflow-hidden">
              {nodeTypes.map((type) => (
                <button
                  key={type}
                  onClick={() => {
                    setLocalType(type)
                    setShowTypeMenu(false)
                  }}
                  className={`w-full px-4 py-2 text-left transition-all ${getTypeStyles(type)} ${
                    localType === type ? 'font-semibold' : ''
                  }`}
                >
                  {type}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Category */}
        <div className="relative">
          <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Category</label>
          <button
            onClick={() => !isReadOnly && setShowCategoryMenu(!showCategoryMenu)}
            disabled={isReadOnly}
            className={`mt-2 px-3 py-2 rounded-lg border transition-all ${
              isReadOnly ? "cursor-not-allowed opacity-60" : "cursor-pointer"
            } ${getCategoryStyles(localCategory)}`}
          >
            {localCategory}
          </button>

          {showCategoryMenu && !isReadOnly && (
            <div className="absolute top-full mt-2 bg-black border border-white/20 rounded-lg shadow-xl z-10 overflow-hidden">
              {categories.map((category) => (
                <button
                  key={category}
                  onClick={() => {
                    setLocalCategory(category)
                    setShowCategoryMenu(false)
                  }}
                  className={`w-full px-4 py-2 text-left transition-all ${getCategoryStyles(category)} ${
                    localCategory === category ? 'font-semibold' : ''
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Node Name */}
        <div>
          <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Name</label>
          <Input
            value={localName}
            onChange={(e) => setLocalName(e.target.value)}
            disabled={isReadOnly || isActive}
            className="mt-2 bg-white/5 border-white/20 text-white disabled:opacity-60 disabled:cursor-not-allowed"
            placeholder="Enter node name"
          />
        </div>

        {/* Description */}
        <div>
          <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Description</label>
          <Textarea
            value={localDescription}
            onChange={(e) => setLocalDescription(e.target.value)}
            disabled={isReadOnly || isActive}
            className="mt-2 bg-white/5 border-white/20 text-white min-h-[100px] disabled:opacity-60 disabled:cursor-not-allowed"
            placeholder="Enter description"
          />
        </div>

        {/* Normalized Weight Display */}
        <div>
          <div className="flex items-center gap-2 mb-2">
            <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">
              Weight (Normalized)
            </label>
            <Tooltip>
              <TooltipTrigger asChild>
                <Info className="w-3 h-3 text-gray-500 cursor-help" />
              </TooltipTrigger>
              <TooltipContent>
                <p>Weights are auto-calculated and normalized so siblings total 100%</p>
              </TooltipContent>
            </Tooltip>
          </div>
          <div className="px-4 py-3 bg-gradient-to-r from-purple-500/20 to-blue-500/20 border border-purple-500/30 rounded-lg">
            <div className="text-xl font-semibold text-white">{node.weight ?? rawWeight}%</div>
            <p className="text-xs text-gray-400 mt-1">
              {node.weight ? "Normalized among siblings" : "Will normalize on save"}
            </p>
          </div>
        </div>

        {/* Notes Section */}
        <div>
          <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Notes</label>
          <Textarea
            value={localNotes}
            onChange={(e) => setLocalNotes(e.target.value)}
            disabled={isReadOnly}
            className="mt-2 bg-white/5 border-white/20 text-white min-h-[120px] disabled:opacity-60 disabled:cursor-not-allowed"
            placeholder="Add your notes here..."
          />
        </div>

        {/* Draft Mode Only: Advanced Settings */}
        {!isActive && !isReadOnly && (
          <>
            {/* Address */}
            <div>
              <div className="flex items-center gap-2 mb-2">
                <MapPin className="w-4 h-4 text-blue-400" />
                <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">Location Address</label>
              </div>
              <Input
                value={localAddress}
                onChange={(e) => setLocalAddress(e.target.value)}
                className="bg-white/5 border-white/20 text-white"
                placeholder="e.g., 1 Infinite Loop, Cupertino, CA"
              />
              <p className="text-xs text-gray-500 mt-2">Optional: Add an address for AI to consider during analysis</p>
            </div>

            {/* CCS Score (if available) */}
            {node.ccs !== undefined && (
              <div>
                <label className="text-xs font-medium text-gray-400 uppercase tracking-wide">
                  CCS (Choice Consequence Score)
                </label>
                <div className="mt-2 px-4 py-3 bg-white/5 border border-white/10 rounded-lg">
                  <div className="text-2xl font-bold text-white">{node.ccs}</div>
                </div>
              </div>
            )}

            {/* Advanced Weight Settings - Collapsible */}
            <div className="border-t border-white/10 pt-4">
              <button
                onClick={() => setShowAdvanced(!showAdvanced)}
                className="w-full flex items-center justify-between p-3 bg-white/5 hover:bg-white/10 rounded-lg transition-colors"
              >
                <div className="flex items-center gap-2">
                  {showAdvanced ? <ChevronDown className="w-4 h-4 text-gray-400" /> : <ChevronRight className="w-4 h-4 text-gray-400" />}
                  <span className="text-sm font-medium text-gray-300">Advanced Weight Settings</span>
                </div>
                <span className="text-xs text-gray-500">Power users only</span>
              </button>

              {showAdvanced && (
                <div className="mt-4 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg space-y-4">
                  {/* Warning */}
                  <div className="flex items-start gap-2">
                    <AlertTriangle className="w-4 h-4 text-yellow-400 mt-0.5 flex-shrink-0" />
                    <p className="text-xs text-yellow-200">
                      Manual weight adjustments will override AHP-calculated weights. Use pairwise comparisons for more rigorous methodology.
                    </p>
                  </div>

                  {/* Importance Slider */}
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <label className="text-xs font-medium text-gray-300 uppercase tracking-wide">
                        Importance
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Info className="w-3 h-3 text-gray-400 cursor-help" />
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>How critical is this factor to your decision?</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div className="flex items-center gap-4">
                      <Slider
                        value={[importance]}
                        onValueChange={(value) => setImportance(value[0])}
                        min={0}
                        max={100}
                        step={1}
                        className="flex-1"
                      />
                      <div className="text-white font-semibold w-12 text-right">{importance}</div>
                    </div>
                  </div>

                  {/* Emotional Weight Slider */}
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <label className="text-xs font-medium text-gray-300 uppercase tracking-wide">
                        Emotional Weight
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Info className="w-3 h-3 text-gray-400 cursor-help" />
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>How emotionally invested are you in this factor?</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div className="flex items-center gap-4">
                      <Slider
                        value={[emotionalWeight]}
                        onValueChange={(value) => setEmotionalWeight(value[0])}
                        min={0}
                        max={100}
                        step={1}
                        className="flex-1"
                      />
                      <div className="text-white font-semibold w-12 text-right">{emotionalWeight}</div>
                    </div>
                  </div>

                  {/* Uncertainty Slider */}
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <label className="text-xs font-medium text-gray-300 uppercase tracking-wide">
                        Uncertainty
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Info className="w-3 h-3 text-gray-400 cursor-help" />
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>How uncertain are you about this factor's outcome?</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div className="flex items-center gap-4">
                      <Slider
                        value={[uncertainty]}
                        onValueChange={(value) => setUncertainty(value[0])}
                        min={0}
                        max={100}
                        step={1}
                        className="flex-1"
                      />
                      <div className="text-white font-semibold w-12 text-right">{uncertainty}</div>
                    </div>
                  </div>

                  {/* Regret Potential Slider */}
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <label className="text-xs font-medium text-gray-300 uppercase tracking-wide">
                        Regret Potential
                      </label>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Info className="w-3 h-3 text-gray-400 cursor-help" />
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>How much might you regret not choosing this?</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div className="flex items-center gap-4">
                      <Slider
                        value={[regretPotential]}
                        onValueChange={(value) => setRegretPotential(value[0])}
                        min={0}
                        max={100}
                        step={1}
                        className="flex-1"
                      />
                      <div className="text-white font-semibold w-12 text-right">{regretPotential}</div>
                    </div>
                  </div>

                  {/* Normalized Weight Preview */}
                  <div className="pt-2 border-t border-yellow-500/20">
                    <div className="text-xs text-gray-400 mb-1">Calculated Weight</div>
                    <div className="text-lg font-semibold text-white">{rawWeight}%</div>
                    <p className="text-xs text-gray-500 mt-1">Will normalize among siblings</p>
                  </div>
                </div>
              )}
            </div>
          </>
        )}
      </div>

      {/* Footer Actions */}
      <div className="p-4 border-t border-white/10 flex gap-3">
        {!isReadOnly && !isActive && (
          <Button
            onClick={handleSave}
            className="flex-1 bg-white text-black hover:bg-gray-200 font-semibold"
          >
            Save Changes
          </Button>
        )}
        <Button
          onClick={onClose}
          variant="outline"
          className={`${isReadOnly || isActive ? 'flex-1' : ''} border-white/30 text-white hover:bg-white/10`}
        >
          {isReadOnly || isActive ? "Close" : "Cancel"}
        </Button>
      </div>
    </div>
  )
}
